# CH1. 상태관리 개요 💁🏻

react는 상태관리를 위한 라이브러리는 아닙니다. 그러나 상태관리의 주요 원칙을 배우고 

### **1. 상태(state)란?**

상태는 변하는 데이터입니다. 동적으로 표현되는 데이터라고도 합니다. 예를 들어 장바구니안에는 몇개의 상태가 있을까요? 해당 물품을 장바구니에 추가할때, 상품 선택 여부, 상품 수량 모든 변할 수 있는 값이 상태입니다. 

즉 state는 컴포넌트를 렌더링하는데 있어 영향을 주는 정보를 지닌 객체로, 컴포넌트 내부에서 관리됩니다. 변할 가능성이 있는 데이터를 state에 담아서 관리할 수 있습니다. 

props는 컴포넌트간 전달이 되지만 state는 컴포넌트 안에서 관리됩니다. 

### 2**. 상태에서 고려해야하는 Side Effect**

side effect란 함수의 입력 외에도 함수의 결과에 영향을 미치는 요인입니다. 상태를 다룰때 side effect를 고려해야합니다. 대표적으로 네트워크요청, API호출이 side effect입니다. 상태를 다룰때 **Side Effects는 주요 고려 대상입니다.** 

### 3**. 상태의 두가지 구분**

- 로컬 : 특정 컴포넌트 안에서만 관리되는 상태
- 전역 : 프로덕트 전체 혹은 여러 컴포넌트에서 관리 되는 상태 → 다른 컴포넌트와 상태를 공유학고 영향을 끼치는 상태

### 4**. 전역 상태에서의 데이터 무결성**

데이터 무결성이란 데이터의 정확성을 보장하기 위해 데이터의 변경이나 수정 시 제한을 두어 안정성을 저해하는 요소를 막고 데이터 상태들을 항상 옳게 유지하는 것입니다. 이러한 데이터 무결성을 위해 동일한 데이터는 항상 같은 곳에서 데이터를 가지고 오도록 해야합니다. 이를 Single Source of truth(신뢰할 수 있는 단일 출처)원칙이라고 하며 프론트에서뿐아니라 다양한 곳에서 언급되는 원칙입니다. 

### 5**. 전역 상태 관리의 대표적인 예**

- 라이트모드 / 다크모드 테마 설정 → 모든 컴포넌트에 새로운 모드가 적용되어야 하기 때문에 테마 설정을 전역으로 관리할 수 있습니다.
- 국제화(Globalization) 설정 → 사용자가 사용하는 브라우저나, 운영체제가 특정 언어를 사용하고 있음을 알아내서 UI에 필요한 텍스트 리소스를 따로 저장한 후, 전역 상태로 관리하기도 합니다. 모든 컴포넌트에 사용자 언어로 표현되어야하기 때문에 전역으로 관리해야합니다.

### 6**. 대표적인 상태 관리 툴**

- React Context
- Redux
- MobX

상태관리 라이브러리는 전역 상태를 위한 저장소를 제공합니다. 또한 props drilling 문제를 해결합니다. props drilling이란 중간 컴포넌트에서 필요하지 않는 props도 넘겨주어야하는 문제입니다. 전역 상태 저장소가 있어서 어디서든 접근이 가능하다면 이러한 문제는 해결됩니다.
